%------------------------------------------------------------------
% Programed by: 
%   - Lucas Rath (lucasrm25@gmail.com)
%   - 
%   -
%------------------------------------------------------------------


classdef MotionModelGP_InvertedPendulum < MotionModelGP
%--------------------------------------------------------------------------
%   xk+1 = fd(xk,uk) + Bd * ( d(zk) + w ),    
%
%       where: zk = Bz*xk,
%              d ~ N(mean_d(zk),var_d(zk))
%              w ~ N(0,sigmaw)
%
%   
%   x = [s, ds, th, dth]'   carriage position and pole angle (and derivatives)
%   u = [F]'                force on the carriage and torque on the pole joint
%   
%--------------------------------------------------------------------------

    properties
        Mc      % mass of the carriage
        Mp      % mass of the pole
        b       % friction coefficient between the carriage and the floor
        I       % inertia matrix of the pole CG
        l       % pole length
        g = 9.8
    end
    
    properties(SetAccess=private)
        Bd = [0;            % xk+1 = fd(xk,uk) + Bd*d(zk)
              0;
              1;
              0]
        Bz = [0 0 1 0       % z = Bz*x
              0 0 0 1]     
        n = 4               % number of outputs x(t)
        m = 1               % number of inputs u(t)
    end
    
    
    methods
        
        function obj = MotionModelGP_InvertedPendulum (Mc, Mp, b, I, l, d, sigmaw)
        %------------------------------------------------------------------
        %   object constructor
        %------------------------------------------------------------------
            % call superclass constructor
            obj = obj@MotionModelGP(d,sigmaw);
            % store parameters
            obj.Mc = Mc;
            obj.Mp = Mp;
            obj.b = b;
            obj.I = I;
            obj.l = l;
        end
        
        function [xdot, grad_xdot] = f (obj, x, u)
        %------------------------------------------------------------------
        %   Continuous time dynamics of the inverted pendulum (including
        %   disturbance):
        %
        %       p(xdot | x,u) = N(xdot, grad_xdot'*var_xdot*grad_xdot)
        %
        %   (Mc+Mp)*dds + b*ds + Mp*l/2*ddth*cos(th) - Mp*l/2*dth^2*sin(th) = F
        %   (I+Mp*(l/2)^2)*ddth + Mp*g*l/2*sin(th) + Mp*l*dds*cos(th) = T
        %   
        %   x = [s, ds, th, dth]'
        %   u = [F]'
        %
        %   (HOW TO GENERATE THESE EQUATIONS:)
        %
        % syms g Mc Mp b I l F T s ds dds  th dth ddth real
        % fzero = [(Mc+Mp)*dds + b*ds + Mp*l/2*ddth*cos(th) - Mp*l/2*dth^2*sin(th) - F ;
        %        (I+Mp*(l/2)^2)*ddth + Mp*g*l/2*sin(th) + Mp*l*dds*cos(th) - T  ];
        % sol = solve(fzero,[dds,ddth])
        % dds = simplify(sol.dds)
        % ddth = simplify(sol.ddth)
        % 
        % u = [F,T]';
        % x = [s, ds, th, dth]'
        % xdot = [ds, dds, dth, ddth]';
        % params = [Mc Mp I g l b ]';
        % 
        % grad_xdot = simplify(jacobian(xdot,x)');
        % matlabFunction( xdot, grad_xdot, 'Vars', {x;u;params} ,'File', 'invertedPendulumModel_f' )
        %------------------------------------------------------------------
            params = [obj.Mc obj.Mp obj.I obj.g obj.l obj.b]';
            u(2,1) = 0;  % set Torque to zero
            [xdot, grad_xdot] = obj.invertedPendulumModel_f( x, u, params );
        end
        
        
        function [A,B] = linearize (obj)
        %------------------------------------------------------------------
        % Return continuous time linearized model parameters A,B
        %       xdot = A*x + B*u
        %------------------------------------------------------------------
            Mc=obj.Mc; Mp=obj.Mp; b=obj.b; I=obj.I; l=obj.l; g=obj.g;
            p = I*(Mc+Mp)+Mc*Mp*l^2;
            A = [0      1              0           0;
                 0 -(I+Mp*l^2)*b/p  (Mp^2*g*l^2)/p   0;
                 0      0              0           1;
                 0 -(Mp*l*b)/p       Mp*g*l*(Mc+Mp)/p  0];
            B = [     0;
                 (I+Mp*l^2)/p;
                      0;
                    Mp*l/p];
        end    
    end
    
    methods(Static)
        function [xdot,grad_xdot] = invertedPendulumModel_f(in1,in2,in3)
            %INVERTEDPENDULUMMODEL_F
            %    [XDOT,GRAD_XDOT] = INVERTEDPENDULUMMODEL_F(IN1,IN2,IN3)

            %    This function was generated by the Symbolic Math Toolbox version 8.3.
            %    09-Dec-2019 02:31:38

            F = in2(1,:);
            I = in3(3,:);
            Mc = in3(1,:);
            Mp = in3(2,:);
            T = in2(2,:);
            b = in3(6,:);
            ds = in1(2,:);
            dth = in1(4,:);
            g = in3(4,:);
            l = in3(5,:);
            th = in1(3,:);
            t2 = cos(th);
            t3 = sin(th);
            t4 = I.*4.0;
            t5 = Mp.^2;
            t6 = dth.^2;
            t7 = l.^2;
            t8 = l.^3;
            t9 = th.*2.0;
            t10 = Mc.*T.*2.0;
            t11 = Mp.*T.*2.0;
            t20 = F.*I.*8.0;
            t21 = I.*b.*ds.*8.0;
            t12 = cos(t9);
            t13 = t2.^2;
            t14 = sin(t9);
            t15 = Mc.*t4;
            t16 = Mp.*t4;
            t17 = -t10;
            t18 = -t11;
            t19 = Mp.*t7;
            t24 = F.*Mp.*l.*t2.*2.0;
            t25 = Mp.*T.*l.*t2.*4.0;
            t26 = -t21;
            t27 = Mc.*Mp.*g.*l.*t3;
            t31 = Mp.*b.*ds.*l.*t2.*2.0;
            t32 = g.*l.*t3.*t5;
            t39 = t3.*t5.*t6.*t8;
            t22 = t13.*2.0;
            t23 = Mc.*t19;
            t28 = F.*t19.*2.0;
            t29 = b.*ds.*t19.*2.0;
            t30 = -t25;
            t34 = t4+t19;
            t35 = -t31;
            t37 = l.*t3.*t6.*t16;
            t38 = t5.*t7.*t12;
            t33 = -t29;
            t36 = t22-1.0;
            t40 = -t38;
            t41 = t5.*t7.*t36;
            t43 = t15+t16+t23+t40;
            t42 = -t41;
            t44 = 1.0./t43;
            t45 = t44.^2;
            t46 = t15+t16+t23+t42;
            t47 = 1.0./t46;
            xdot = [ds;(t47.*(t20+t26+t28+t30+t33+t37+t39+g.*t2.*t3.*t5.*t7.*2.0))./2.0;dth;t47.*(t17+t18+t24+t27+t32+t35+t2.*t3.*t5.*t6.*t7).*-2.0];
            if nargout > 1
                grad_xdot = reshape([0.0,1.0,0.0,0.0,0.0,-b.*t34.*t44,(Mp.*l.*t44.*(T.*t3.*4.0+t2.*t4.*t6+t2.*t6.*t19+Mp.*g.*l.*t12.*2.0))./2.0-t5.*t7.*t14.*t45.*(t20+t26+t28+t30+t33+t37+t39+g.*t5.*t7.*t14),Mp.*dth.*l.*t3.*t34.*t44,0.0,0.0,0.0,1.0,0.0,Mp.*b.*l.*t2.*t47.*4.0,Mp.*l.*t44.*(F.*t3.*-2.0+Mc.*g.*t2+Mp.*g.*t2+b.*ds.*t3.*2.0+Mp.*l.*t6.*t12).*-2.0+t5.*t7.*t14.*t45.*(t17+t18+t24+t27+t32+t35+(t5.*t6.*t7.*t14)./2.0).*4.0,dth.*t5.*t7.*t14.*t44.*-2.0],[4,4]);
            end
        end
    end
    
end
